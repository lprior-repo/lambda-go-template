version: '3'

# Serverless Acceleration Platform - Go Template
# Velocity First: Ship with Confidence & Discipline

vars:
  PROJECT_NAME: lambda-go-template
  AWS_REGION: us-east-1
  ENVIRONMENT: dev
  GO_VERSION: 1.21
  GOOS: linux
  GOARCH: arm64

env:
  AWS_REGION: "{{.AWS_REGION}}"
  GOOS: "{{.GOOS}}"
  GOARCH: "{{.GOARCH}}"
  CGO_ENABLED: "0"

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list-all

  # üöÄ Velocity First: Build & Package
  deps:
    desc: Download Go module dependencies
    cmds:
      - go mod download
      - go mod verify
    sources:
      - go.mod
      - go.sum

  build:
    desc: Build Go Lambda functions for ARM64
    deps: [deps]
    cmds:
      - echo "üî® Building for {{.GOOS}}/{{.GOARCH}}..."
      - mkdir -p build
      - GOOS={{.GOOS}} GOARCH={{.GOARCH}} go build -ldflags="-s -w" -o build/hello src/hello/main.go
      - GOOS={{.GOOS}} GOARCH={{.GOARCH}} go build -ldflags="-s -w" -o build/users src/users/main.go
      - chmod +x build/hello build/users
    sources:
      - src/**/*.go
      - go.mod
      - go.sum
    generates:
      - build/hello
      - build/users

  build:debug:
    desc: Build Go Lambda functions with debug symbols for local debugging
    deps: [deps]
    cmds:
      - echo "üî® Building debug version for {{.GOOS}}/{{.GOARCH}}..."
      - mkdir -p build
      - cd src/hello && GOOS={{.GOOS}} GOARCH={{.GOARCH}} CGO_ENABLED=0 go build -gcflags="all=-N -l" -o bootstrap main.go
      - cd src/hello && zip -r ../../build/hello.zip bootstrap && rm bootstrap
      - cd src/users && GOOS={{.GOOS}} GOARCH={{.GOARCH}} CGO_ENABLED=0 go build -gcflags="all=-N -l" -o bootstrap main.go
      - cd src/users && zip -r ../../build/users.zip bootstrap && rm bootstrap
      - echo "‚úÖ Debug builds created: build/hello.zip, build/users.zip"
    sources:
      - src/**/*.go
      - go.mod
      - go.sum
    generates:
      - build/hello.zip
      - build/users.zip

  package:
    desc: Package Lambda functions for deployment
    deps: [build]
    cmds:
      - echo "üì¶ Packaging Lambda functions..."
      - cd build && cp hello bootstrap && zip hello.zip bootstrap && rm bootstrap
      - cd build && cp users bootstrap && zip users.zip bootstrap && rm bootstrap
      - echo "‚úÖ Packages created: build/hello.zip, build/users.zip"
    sources:
      - build/hello
      - build/users
    generates:
      - build/*.zip

  # üß™ Test-First: Build with Quality
  test:
    desc: Run all tests with coverage
    deps: [deps]
    cmds:
      - go test -v -race -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html
      - go tool cover -func=coverage.out

  test:unit:
    desc: Run unit tests only
    deps: [deps]
    cmds:
      - go test -v -short ./...

  test:integration:
    desc: Run integration tests
    deps: [deps]
    cmds:
      - go test -v -run Integration ./...

  test:race:
    desc: Run tests with race detection
    deps: [deps]
    cmds:
      - go test -v -race ./...

  test:bench:
    desc: Run benchmark tests
    deps: [deps]
    cmds:
      - go test -v -bench=. -benchmem ./...

  test:watch:
    desc: Run tests in watch mode for TDD
    deps: [deps]
    cmds:
      - |
        if command -v watchexec >/dev/null 2>&1; then
          watchexec -e go -- go test -v ./...
        elif command -v fswatch >/dev/null 2>&1; then
          fswatch -o . | xargs -n1 -I{} go test -v ./...
        else
          echo "‚ö†Ô∏è  Install watchexec or fswatch for watch mode"
          echo "üìã Run 'go test -v ./...' manually after changes"
        fi

  # üìä Observability First: Ship with Insight
  logs:
    desc: Tail Lambda function logs
    cmds:
      - aws logs tail /aws/lambda/{{.PROJECT_NAME}}-hello --follow

  logs:hello:
    desc: Get hello function logs with structured output
    cmds:
      - echo "üìã Latest log streams for hello function:"
      - aws logs describe-log-streams --log-group-name /aws/lambda/{{.PROJECT_NAME}}-hello --order-by LastEventTime --descending --max-items 5
      - echo "üìù Recent log events:"
      - aws logs get-log-events --log-group-name /aws/lambda/{{.PROJECT_NAME}}-hello --log-stream-name $(aws logs describe-log-streams --log-group-name /aws/lambda/{{.PROJECT_NAME}}-hello --order-by LastEventTime --descending --max-items 1 --query 'logStreams[0].logStreamName' --output text) --limit 50

  logs:users:
    desc: Get users function logs with structured output
    cmds:
      - echo "üìã Latest log streams for users function:"
      - aws logs describe-log-streams --log-group-name /aws/lambda/{{.PROJECT_NAME}}-users --order-by LastEventTime --descending --max-items 5
      - echo "üìù Recent log events:"
      - aws logs get-log-events --log-group-name /aws/lambda/{{.PROJECT_NAME}}-users --log-stream-name $(aws logs describe-log-streams --log-group-name /aws/lambda/{{.PROJECT_NAME}}-users --order-by LastEventTime --descending --max-items 1 --query 'logStreams[0].logStreamName' --output text) --limit 50

  xray:
    desc: View X-Ray traces
    cmds:
      - echo "üîç X-Ray Service Map: https://{{.AWS_REGION}}.console.aws.amazon.com/xray/home?region={{.AWS_REGION}}#/service-map"
      - echo "üìä X-Ray Traces: https://{{.AWS_REGION}}.console.aws.amazon.com/xray/home?region={{.AWS_REGION}}#/traces"

  metrics:
    desc: View CloudWatch metrics dashboard
    cmds:
      - echo "üìä CloudWatch Dashboard: https://{{.AWS_REGION}}.console.aws.amazon.com/cloudwatch/home?region={{.AWS_REGION}}#dashboards:name={{.PROJECT_NAME}}"
      - echo "‚ö° Lambda Metrics: https://{{.AWS_REGION}}.console.aws.amazon.com/lambda/home?region={{.AWS_REGION}}#/functions"

  # üèóÔ∏è Infrastructure as Code
  tf:init:
    desc: Initialize Terraform
    dir: terraform
    cmds:
      - terraform init

  tf:plan:
    desc: Plan Terraform changes
    dir: terraform
    deps: [tf:init]
    cmds:
      - terraform plan -var="environment={{.ENVIRONMENT}}"

  tf:apply:
    desc: Apply Terraform changes
    dir: terraform
    deps: [package]
    cmds:
      - terraform apply -var="environment={{.ENVIRONMENT}}" -auto-approve

  tf:destroy:
    desc: Destroy Terraform infrastructure
    dir: terraform
    cmds:
      - terraform destroy -var="environment={{.ENVIRONMENT}}" -auto-approve

  # üîê OIDC Bootstrap
  bootstrap:
    desc: Bootstrap OIDC for GitHub Actions deployment
    dir: terraform
    deps: [tf:init]
    cmds:
      - |
        echo "üöÄ Bootstrapping OIDC infrastructure..."
        read -p "GitHub Organization: " GITHUB_ORG
        read -p "GitHub Repository: " GITHUB_REPO
        read -p "Create new OIDC provider? (y/n): " CREATE_OIDC
        CREATE_OIDC_BOOL=$([ "$CREATE_OIDC" = "y" ] && echo "true" || echo "false")
        terraform plan \
          -var="github_org=$GITHUB_ORG" \
          -var="github_repo=$GITHUB_REPO" \
          -var="create_oidc_provider=$CREATE_OIDC_BOOL" \
          -var="environment={{.ENVIRONMENT}}" \
          -out=bootstrap.tfplan
        echo ""
        echo "üìã Review the plan above. Continue? (y/n)"
        read -p "> " CONTINUE
        if [ "$CONTINUE" = "y" ]; then
          terraform apply bootstrap.tfplan
          echo ""
          echo "‚úÖ OIDC infrastructure created!"
          echo "üîß Bootstrap script generated at: scripts/bootstrap-oidc.sh"
          echo "üìÑ Run the script to generate GitHub Actions workflow"
        else
          echo "‚ùå Bootstrap cancelled"
        fi

  tf:validate:
    desc: Validate Terraform configuration
    dir: terraform
    cmds:
      - terraform validate
      - terraform fmt -check

  tf:security:
    desc: Run security checks on Terraform
    dir: terraform
    cmds:
      - |
        if command -v tfsec >/dev/null 2>&1; then
          tfsec .
        else
          echo "‚ö†Ô∏è  tfsec not installed. Install with: brew install tfsec"
        fi

  # üõ°Ô∏è Well-Architected: Ship with Excellence
  lint:
    desc: Run Go linting tools
    deps: [deps]
    cmds:
      - gofmt -s -w .
      - go vet ./...
      - |
        if command -v golangci-lint >/dev/null 2>&1; then
          golangci-lint run
        else
          echo "‚ö†Ô∏è  golangci-lint not installed. Install with: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin"
        fi

  security:
    desc: Run security audit
    deps: [deps]
    cmds:
      - |
        if command -v gosec >/dev/null 2>&1; then
          gosec ./...
        else
          echo "‚ö†Ô∏è  gosec not installed. Install with: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest"
        fi
      - go list -json -deps ./... | nancy sleuth

  mod:tidy:
    desc: Tidy and verify Go modules
    cmds:
      - go mod tidy
      - go mod verify

  validate:
    desc: Run all validation checks
    deps: [deps]
    cmds:
      - task: lint
      - task: test
      - task: tf:validate
      - task: tf:security
      - task: security

  # üöÄ Deployment Pipeline
  deploy:dev:
    desc: Deploy to development environment
    cmds:
      - task: validate
      - task: tf:apply
        vars: {ENVIRONMENT: dev}

  deploy:staging:
    desc: Deploy to staging environment
    cmds:
      - task: validate
      - task: tf:apply
        vars: {ENVIRONMENT: staging}

  deploy:prod:
    desc: Deploy to production environment
    cmds:
      - task: validate
      - task: tf:apply
        vars: {ENVIRONMENT: prod}

  # üßπ Cleanup
  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf build/
      - rm -f coverage.out coverage.html
      - go clean -cache -testcache -modcache

  clean:tf:
    desc: Clean Terraform state (DANGEROUS)
    dir: terraform
    cmds:
      - rm -rf .terraform/
      - rm -f .terraform.lock.hcl
      - rm -f terraform.tfstate*

  # üîç Development Tools
  dev:setup:
    desc: Setup Go development environment
    cmds:
      - go version
      - task: deps
      - task: tf:init
      - echo "‚úÖ Go development environment ready!"
      - echo "üêπ Go version: {{.GO_VERSION}}"
      - echo "üèóÔ∏è  Target: {{.GOOS}}/{{.GOARCH}}"
      - echo "üí° Run 'task test:watch' for TDD workflow"
      - echo "üöÄ Run 'task deploy:dev' to deploy"

  dev:tools:
    desc: Install Go development tools
    cmds:
      - go install golang.org/x/tools/cmd/goimports@latest
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
      - echo "üõ†Ô∏è Development tools installed!"

  # üß™ SAM Local Development & Debugging
  sam:build:
    desc: Build SAM application from Terraform
    deps: [build:debug]
    dir: terraform
    cmds:
      - sam build --hook-name terraform --beta-features

  sam:invoke:hello:
    desc: Invoke hello function locally with SAM
    deps: [sam:build]
    dir: terraform
    cmds:
      - sam local invoke aws_lambda_function.hello -e ../events/hello-event.json --beta-features

  sam:invoke:users:
    desc: Invoke users function locally with SAM
    deps: [sam:build]
    dir: terraform
    cmds:
      - sam local invoke aws_lambda_function.users -e ../events/users-get-event.json --beta-features

  sam:api:
    desc: Start local API Gateway with SAM
    deps: [sam:build]
    dir: terraform
    cmds:
      - echo "üöÄ Starting local API Gateway on http://localhost:3000"
      - echo "üìã Test endpoints:"
      - echo "   curl http://localhost:3000/hello"
      - echo "   curl http://localhost:3000/users"
      - sam local start-api --hook-name terraform --beta-features --port 3000

  sam:lambda:
    desc: Start local Lambda service emulator
    deps: [sam:build]
    dir: terraform
    cmds:
      - echo "üöÄ Starting local Lambda service on http://localhost:3001"
      - echo "üìã Invoke with AWS CLI:"
      - echo "   aws lambda invoke --function-name aws_lambda_function.hello --endpoint-url http://127.0.0.1:3001/ --payload file://events/hello-event.json response.json"
      - sam local start-lambda --hook-name terraform --beta-features

  # üêõ Debugging Tasks
  debug:hello:
    desc: Debug hello function with SAM (attach debugger on port 5986)
    deps: [sam:build]
    dir: terraform
    cmds:
      - echo "üêõ Starting hello function in debug mode on port 5986"
      - echo "üìã Attach debugger to localhost:5986"
      - echo "üìã In VS Code: Run and Debug -> 'Debug Lambda Hello' -> F5"
      - sam local invoke aws_lambda_function.hello -e ../events/hello-event.json --debug-port 5986 --beta-features

  debug:users:
    desc: Debug users function with SAM (attach debugger on port 5986)
    deps: [sam:build]
    dir: terraform
    cmds:
      - echo "üêõ Starting users function in debug mode on port 5986"
      - echo "üìã Attach debugger to localhost:5986"
      - echo "üìã In VS Code: Run and Debug -> 'Debug Lambda Users' -> F5"
      - sam local invoke aws_lambda_function.users -e ../events/users-get-event.json --debug-port 5986 --beta-features

  debug:api:
    desc: Debug API Gateway with SAM (attach debugger on port 5986)
    deps: [sam:build]
    dir: terraform
    cmds:
      - echo "üêõ Starting API Gateway in debug mode on port 5986"
      - echo "üöÄ Local API: http://localhost:3000"
      - echo "üìã Attach debugger to localhost:5986 before making requests"
      - echo "üìã Test: curl http://localhost:3000/hello"
      - sam local start-api --hook-name terraform --beta-features --debug-port 5986 --port 3000

  # üîß SAM Utilities
  sam:logs:
    desc: Show SAM local execution logs
    cmds:
      - echo "üìã SAM local logs are displayed in the terminal where SAM is running"
      - echo "üí° For verbose logging, add --debug flag to SAM commands"

  sam:clean:
    desc: Clean SAM build artifacts
    dir: terraform
    cmds:
      - rm -rf .aws-sam/
      - echo "üßπ SAM build artifacts cleaned"

  sam:test:
    desc: Run all SAM local tests
    deps: [sam:build]
    dir: terraform
    cmds:
      - echo "üß™ Testing hello function..."
      - sam local invoke aws_lambda_function.hello -e ../events/hello-event.json --beta-features
      - echo "üß™ Testing users GET..."
      - sam local invoke aws_lambda_function.users -e ../events/users-get-event.json --beta-features
      - echo "üß™ Testing users POST..."
      - sam local invoke aws_lambda_function.users -e ../events/users-post-event.json --beta-features
      - echo "‚úÖ All SAM tests completed"

  dev:invoke:
    desc: Quick invoke hello function locally using SAM
    deps: [sam:invoke:hello]

  api:docs:
    desc: Generate API documentation from OpenAPI spec
    cmds:
      - |
        if command -v redoc-cli >/dev/null 2>&1; then
          redoc-cli build openapi.yaml --output docs/api.html
          echo "üìö API documentation generated: docs/api.html"
        else
          echo "‚ö†Ô∏è  redoc-cli not installed. Run: npm install -g redoc-cli"
        fi

  api:validate:
    desc: Validate OpenAPI specification
    cmds:
      - |
        if command -v swagger >/dev/null 2>&1; then
          swagger validate openapi.yaml
        else
          echo "‚ö†Ô∏è  swagger CLI not installed"
          echo "üìù OpenAPI spec located at: openapi.yaml"
        fi

  # üìä Performance Analysis
  profile:
    desc: Run CPU profiling on functions
    deps: [build]
    cmds:
      - echo "üî¨ Running CPU profile..."
      - go test -cpuprofile=cpu.prof -bench=. ./...
      - go tool pprof -http=:8080 cpu.prof &
      - echo "üìä Profile server at: http://localhost:8080"

  profile:memory:
    desc: Run memory profiling on functions
    deps: [build]
    cmds:
      - echo "üî¨ Running memory profile..."
      - go test -memprofile=mem.prof -bench=. ./...
      - go tool pprof -http=:8081 mem.prof &
      - echo "üìä Memory profile server at: http://localhost:8081"

  # üìä Well-Architected Review
  review:
    desc: Open Well-Architected review document
    cmds:
      - |
        if [ -f "WELL_ARCHITECTED.md" ]; then
          echo "üìã Opening Well-Architected review..."
          open WELL_ARCHITECTED.md 2>/dev/null || echo "üìÑ Review document: WELL_ARCHITECTED.md"
        else
          echo "‚ùå WELL_ARCHITECTED.md not found. Run 'task generate:docs' first."
        fi

  generate:docs:
    desc: Generate project documentation
    cmds:
      - task: api:docs
      - task: test
      - echo "üìö Documentation generated successfully!"
      - echo "üìä Coverage report: coverage.html"
      - echo "üìö API docs: docs/api.html"
      - echo "üß™ SAM debugging guide: docs/SAM_LOCAL_DEBUGGING.md"
      - echo "‚ö° SAM quick start: docs/SAM_QUICK_START.md"

  # üîç Development Workflow
  dev:workflow:
    desc: Complete development workflow with SAM
    cmds:
      - echo "üöÄ Starting complete development workflow..."
      - task: build:debug
      - task: sam:build
      - task: sam:test
      - echo "‚úÖ Development workflow complete!"
      - echo "üí° Next steps:"
      - echo "   - Run 'task sam:api' to start local API"
      - echo "   - Run 'task debug:hello' to debug functions"
      - echo "   - Run 'task sam:invoke:hello' to test individual functions"
