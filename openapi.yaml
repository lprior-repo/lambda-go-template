openapi: 3.0.3
info:
  title: Lambda Go Template API
  description: |
    A comprehensive, production-ready Go Lambda template API with observability, error handling, and security best practices.

    This API demonstrates:
    - Idiomatic Go microservice architecture
    - AWS Lambda with API Gateway v2 HTTP API
    - Structured logging and distributed tracing
    - Type-safe configuration management
    - Comprehensive error handling
    - CORS and security headers
    - DynamoDB integration
    - EventBridge for audit logging
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://sa5b99x1e8.execute-api.us-east-1.amazonaws.com/prod
    description: Production environment
  - url: https://staging.api.example.com
    description: Staging environment
  - url: http://localhost:3000
    description: Local development

paths:
  /hello:
    get:
      summary: Health check and service information
      description: |
        Returns service health status, version information, and observability data.
        This endpoint is useful for health checks, monitoring, and service discovery.
      operationId: getHello
      tags:
        - Health
      parameters:
        - $ref: '#/components/parameters/XRequestId'
      responses:
        '200':
          description: Service is healthy and operational
          headers:
            X-Request-ID:
              $ref: '#/components/headers/XRequestId'
            Cache-Control:
              $ref: '#/components/headers/CacheControl'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/CorsOrigin'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
              examples:
                success:
                  summary: Successful health check
                  value:
                    data:
                      message: "Hello from Lambda with observability!"
                      path: "/prod/hello"
                      timestamp: "2025-09-22T01:28:44Z"
                      environment: "prod"
                      requestId: "6acbb5f1-123f-4f70-9daf-5b69de6e9864"
                      version: "1.0.0"
                    requestId: "6acbb5f1-123f-4f70-9daf-5b69de6e9864"
                    timestamp: "2025-09-22T01:28:44Z"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Not supported
      description: POST method is not supported for this endpoint
      operationId: postHello
      tags:
        - Health
      responses:
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Not supported
      description: PUT method is not supported for this endpoint
      operationId: putHello
      tags:
        - Health
      responses:
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Not supported
      description: DELETE method is not supported for this endpoint
      operationId: deleteHello
      tags:
        - Health
      responses:
        '404':
          $ref: '#/components/responses/NotFound'

  /users:
    get:
      summary: List all users
      description: |
        Retrieves a list of all users in the system. This endpoint demonstrates
        data retrieval patterns, response formatting, and observability integration.
      operationId: getUsers
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/XRequestId'
        - name: limit
          in: query
          description: Maximum number of users to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of users to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Users retrieved successfully
          headers:
            X-Request-ID:
              $ref: '#/components/headers/XRequestId'
            Cache-Control:
              $ref: '#/components/headers/CacheControl'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/CorsOrigin'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
              examples:
                success:
                  summary: Successful user list retrieval
                  value:
                    data:
                      users:
                        - id: "1"
                          name: "John Doe"
                          email: "john@example.com"
                          createdAt: "2024-01-15T10:30:00Z"
                        - id: "2"
                          name: "Jane Smith"
                          email: "jane@example.com"
                          createdAt: "2024-01-16T14:45:00Z"
                      count: 2
                      timestamp: "2025-09-22T01:28:48Z"
                      requestId: "f369cafe-a8e8-45de-98f8-4219a444aeda"
                      version: "1.0.0"
                    requestId: "f369cafe-a8e8-45de-98f8-4219a444aeda"
                    timestamp: "2025-09-22T01:28:48Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new user
      description: |
        Creates a new user in the system. This endpoint is currently not implemented
        and will return a method not allowed error.
      operationId: createUser
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/XRequestId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            examples:
              valid:
                summary: Valid user creation request
                value:
                  name: "Alice Johnson"
                  email: "alice@example.com"
      responses:
        '400':
          description: Method not allowed - POST is not supported for users endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                methodNotAllowed:
                  summary: Method not allowed error
                  value:
                    message: "only GET method is allowed for users endpoint"
                    error: "ValidationError"
                    requestId: "abc-123-def"
                    timestamp: "2025-09-22T01:30:00Z"
                    field: "httpMethod"
                    value: "POST"
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update a user
      description: PUT method is not supported for this endpoint
      operationId: updateUser
      tags:
        - Users
      responses:
        '400':
          $ref: '#/components/responses/MethodNotAllowed'
    delete:
      summary: Delete a user
      description: DELETE method is not supported for this endpoint
      operationId: deleteUser
      tags:
        - Users
      responses:
        '400':
          $ref: '#/components/responses/MethodNotAllowed'

  /users/{id}:
    get:
      summary: Get a user by ID
      description: |
        Retrieves a specific user by their unique identifier. This endpoint demonstrates
        path parameter handling and single resource retrieval patterns.
      operationId: getUserById
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier for the user
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 50
          example: "123"
        - $ref: '#/components/parameters/XRequestId'
      responses:
        '200':
          description: User found and returned
          headers:
            X-Request-ID:
              $ref: '#/components/headers/XRequestId'
            Cache-Control:
              $ref: '#/components/headers/CacheControl'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              examples:
                success:
                  summary: Successful user retrieval
                  value:
                    data:
                      users:
                        - id: "1"
                          name: "John Doe"
                          email: "john@example.com"
                          createdAt: "2024-01-15T10:30:00Z"
                      count: 1
                      timestamp: "2025-09-22T01:28:48Z"
                      requestId: "single-user-request-123"
                      version: "1.0.0"
                    requestId: "single-user-request-123"
                    timestamp: "2025-09-22T01:28:48Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                userNotFound:
                  summary: User not found error
                  value:
                    message: "user with identifier '999' not found"
                    error: "NotFoundError"
                    requestId: "not-found-request-123"
                    timestamp: "2025-09-22T01:30:00Z"
                    resource: "user"
                    identifier: "999"
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  parameters:
    XRequestId:
      name: X-Request-ID
      in: header
      description: Unique identifier for the request for tracing and debugging
      required: false
      schema:
        type: string
        format: uuid
      example: "550e8400-e29b-41d4-a716-446655440000"

  headers:
    XRequestId:
      description: Unique identifier for the request
      schema:
        type: string
        format: uuid
      example: "550e8400-e29b-41d4-a716-446655440000"

    CacheControl:
      description: Cache control directive
      schema:
        type: string
      example: "max-age=300"

    CorsOrigin:
      description: CORS allowed origin
      schema:
        type: string
      example: "*"

  schemas:
    HelloResponse:
      type: object
      required:
        - data
        - requestId
        - timestamp
      properties:
        data:
          type: object
          required:
            - message
            - path
            - timestamp
            - environment
            - requestId
            - version
          properties:
            message:
              type: string
              description: Welcome message from the service
              example: "Hello from Lambda with observability!"
            path:
              type: string
              description: The request path that was called
              example: "/prod/hello"
            timestamp:
              type: string
              format: date-time
              description: When the response was generated
              example: "2025-09-22T01:28:44Z"
            environment:
              type: string
              description: The environment where the service is running
              enum: [dev, staging, prod]
              example: "prod"
            requestId:
              type: string
              description: Unique identifier for this request
              example: "6acbb5f1-123f-4f70-9daf-5b69de6e9864"
            version:
              type: string
              description: Version of the service
              pattern: '^\d+\.\d+\.\d+.*$'
              example: "1.0.0"
        requestId:
          type: string
          description: Unique identifier for this request
          example: "6acbb5f1-123f-4f70-9daf-5b69de6e9864"
        timestamp:
          type: string
          format: date-time
          description: When the response was generated
          example: "2025-09-22T01:28:44Z"

    User:
      type: object
      required:
        - id
        - name
        - email
        - createdAt
      properties:
        id:
          type: string
          description: Unique identifier for the user
          pattern: '^[a-zA-Z0-9_-]+$'
          example: "1"
        name:
          type: string
          description: Full name of the user
          minLength: 1
          maxLength: 100
          example: "John Doe"
        email:
          type: string
          format: email
          description: Email address of the user
          example: "john@example.com"
        createdAt:
          type: string
          format: date-time
          description: When the user was created
          example: "2024-01-15T10:30:00Z"

    UsersData:
      type: object
      required:
        - users
        - count
        - timestamp
        - requestId
        - version
      properties:
        users:
          type: array
          description: List of users
          items:
            $ref: '#/components/schemas/User'
        count:
          type: integer
          description: Number of users returned
          minimum: 0
          example: 3
        timestamp:
          type: string
          format: date-time
          description: When the response was generated
          example: "2025-09-22T01:28:48Z"
        requestId:
          type: string
          description: Unique identifier for this request
          example: "f369cafe-a8e8-45de-98f8-4219a444aeda"
        version:
          type: string
          description: Version of the service
          pattern: '^\d+\.\d+\.\d+.*$'
          example: "1.0.0"

    UsersResponse:
      type: object
      required:
        - data
        - requestId
        - timestamp
      properties:
        data:
          $ref: '#/components/schemas/UsersData'
        requestId:
          type: string
          description: Unique identifier for this request
          example: "f369cafe-a8e8-45de-98f8-4219a444aeda"
        timestamp:
          type: string
          format: date-time
          description: When the response was generated
          example: "2025-09-22T01:28:48Z"

    UserResponse:
      type: object
      required:
        - data
        - requestId
        - timestamp
      properties:
        data:
          $ref: '#/components/schemas/UsersData'
        requestId:
          type: string
          description: Unique identifier for this request
          example: "single-user-request-123"
        timestamp:
          type: string
          format: date-time
          description: When the response was generated
          example: "2025-09-22T01:28:48Z"

    CreateUserRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          description: Full name of the user
          minLength: 1
          maxLength: 100
          example: "Alice Johnson"
        email:
          type: string
          format: email
          description: Email address of the user
          example: "alice@example.com"

    ErrorResponse:
      type: object
      required:
        - message
        - timestamp
      properties:
        message:
          type: string
          description: Human-readable error message
          example: "validation error for field 'email': invalid email format"
        error:
          type: string
          description: Error type for programmatic handling
          enum:
            - ValidationError
            - NotFoundError
            - TimeoutError
            - InternalError
          example: "ValidationError"
        requestId:
          type: string
          description: Unique identifier for this request
          example: "error-request-123"
        timestamp:
          type: string
          format: date-time
          description: When the error occurred
          example: "2025-09-22T01:30:00Z"
        path:
          type: string
          description: The request path where the error occurred
          example: "/prod/users"
        field:
          type: string
          description: Field name that caused validation error (for ValidationError)
          example: "email"
        value:
          type: string
          description: Field value that caused validation error (for ValidationError)
          example: "invalid-email"
        resource:
          type: string
          description: Resource type that was not found (for NotFoundError)
          example: "user"
        identifier:
          type: string
          description: Resource identifier that was not found (for NotFoundError)
          example: "999"
        operation:
          type: string
          description: Operation that timed out or failed (for TimeoutError/InternalError)
          example: "database_query"

  responses:
    BadRequest:
      description: Bad request - validation error or invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            validationError:
              summary: Validation error
              value:
                message: "validation error for field 'email': invalid email format"
                error: "ValidationError"
                requestId: "validation-error-123"
                timestamp: "2025-09-22T01:30:00Z"
                field: "email"
                value: "invalid-email"

    NotFound:
      description: Resource not found or endpoint not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            notFound:
              summary: Resource not found
              value:
                message: "user with identifier '999' not found"
                error: "NotFoundError"
                requestId: "not-found-123"
                timestamp: "2025-09-22T01:30:00Z"
                resource: "user"
                identifier: "999"
            endpointNotFound:
              summary: Endpoint not found
              value:
                message: "Not Found"
                requestId: "endpoint-not-found-123"
                timestamp: "2025-09-22T01:30:00Z"

    MethodNotAllowed:
      description: HTTP method not allowed for this endpoint
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            methodNotAllowed:
              summary: Method not allowed
              value:
                message: "only GET method is allowed for users endpoint"
                error: "ValidationError"
                requestId: "method-not-allowed-123"
                timestamp: "2025-09-22T01:30:00Z"
                field: "httpMethod"
                value: "POST"

    Timeout:
      description: Request timeout
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            timeout:
              summary: Request timeout
              value:
                message: "operation 'database_query' timed out"
                error: "TimeoutError"
                requestId: "timeout-123"
                timestamp: "2025-09-22T01:30:00Z"
                operation: "database_query"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            internalError:
              summary: Internal server error
              value:
                message: "internal error: database connection failed"
                error: "InternalError"
                requestId: "internal-error-123"
                timestamp: "2025-09-22T01:30:00Z"

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication (if implemented)

tags:
  - name: Health
    description: Health check and service information endpoints
  - name: Users
    description: User management operations

externalDocs:
  description: Find more info about this API
  url: https://github.com/your-org/lambda-go-template
